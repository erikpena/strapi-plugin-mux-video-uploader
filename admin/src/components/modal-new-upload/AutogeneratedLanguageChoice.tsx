import { Badge, Checkbox } from '@strapi/design-system';
import { Button } from '@strapi/design-system/Button';
import React from 'react';
import { SUPPORTED_MUX_LANGUAGES } from '../../../../types/shared-types';
import LanguageIcon from './LanguageIcon';
import { NewUploadFormValues } from './newUpload';

export function AutogeneratedLanguageChoice({
  values,
  setFieldValue,
  language,
}: {
  values: NewUploadFormValues;
  setFieldValue: <Field extends keyof NewUploadFormValues>(
    field: Field,
    value: NewUploadFormValues[Field],
    shouldValidate?: boolean | undefined
  ) => void;
  language: (typeof SUPPORTED_MUX_LANGUAGES)[number];
}) {
  const existingValue = values.autogenerated_captions_languages?.find((l) => l.code === language.code);
  const checked = !!existingValue;

  function handleCheckChange() {
    const currentValues = values.autogenerated_captions_languages || [];
    if (checked) {
      const withLanguageRemoved = currentValues.filter((l) => l.code !== language.code);
      setFieldValue(
        'autogenerated_captions_languages',
        withLanguageRemoved.length > 0 && existingValue?.isSourceLanguage
          ? // Set first remaining language as source when removing the current source
            [{ ...withLanguageRemoved[0], isSourceLanguage: true }, ...withLanguageRemoved.slice(1)]
          : withLanguageRemoved
      );
    } else {
      setFieldValue('autogenerated_captions_languages', [
        ...currentValues,
        {
          code: language.code,
          // First value should be default
          isSourceLanguage: currentValues.length === 0 ? true : false,
        },
      ]);
    }
  }

  function setAsSource(e: React.MouseEvent) {
    e.preventDefault();
    const currentValues = values.autogenerated_captions_languages || [];
    setFieldValue('autogenerated_captions_languages', [
      ...currentValues.map((l) => ({
        ...l,
        isSourceLanguage: l.code === language.code,
      })),
    ]);
  }

  return (
    <div
      style={{
        display: 'flex',
        gap: '0.5em',
      }}
    >
      <div
        style={{
          flex: '1',
        }}
      >
        <Checkbox
          id={`autogenerated_captions_languages--${language.code}`}
          value={language.code}
          name="autogenerated_captions_languages"
          onChange={handleCheckChange}
          checked={checked}
        >
          {language.label}
        </Checkbox>
      </div>
      {checked &&
        (existingValue?.isSourceLanguage ? (
          <Badge size="S" active>
            <LanguageIcon /> source
          </Badge>
        ) : (
          <Button
            startIcon={<LanguageIcon />}
            variant="ghost"
            size="S"
            onClick={setAsSource}
            style={{
              height: 'auto',
              padding: '0.1em 0.25em',
            }}
          >
            Set as source
          </Button>
        ))}
    </div>
  );
}
